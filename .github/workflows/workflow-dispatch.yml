# 手动触发事件
# 可以提供inputs输入值，在上下文中都可以访问inputs输入的值
# SERVER_IP  值的名称
#   description  描述
#   required  是否必填
#   default  默认值
name: Workflow Dispatch

on:
  workflow_dispatch:
    inputs:
      SERVER_IP:
        description: '服务器IP'
        required: true
        default: ''
      SERVER_NAME:
        description: '服务器用户名'
        required: true
        default: ''
      SERVER_PASSWORD:
        description: '服务器密码'
        required: true
        default: ''

jobs:
  build-ssh-liunx:
    runs-on: ubuntu-latest #指定运行环境为最新的Ubuntu版本
    strategy:
      matrix:
        node-version: [ 14.21.2 ] #指定node版本
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }} #使用action安装node环境
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install #安装项目依赖
      - run: npm run build #build项目
      - name: ssh scp ssh pipelines #使用市场找到的action来将项目build的产物传到我的服务器
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
        env:
          WELCOME: "ssh scp ssh pipelines"
          LASTSSH: "Doing something after copying"
        with:
          host: ${{ inputs.SERVER_IP }} # 服务器的ip
          user: ${{ inputs.SERVER_NAME }} # 服务器的账号
          pass: ${{ inputs.SERVER_PASSWORD }} # 服务器的密码
          connect_timeout: 10s
          first_ssh: | #这部分是在服务器上，传输文件前执行的命令，关闭并删除运行中的旧版本
            cd /srv/plug-r-qw
            rm -rf *
          scp: | #将build生成的文件从GitHub服务器的相应目录，传到我服务器的相应目录
            mkdir public
            ./dist/* => /srv/plug-r-qw/public
            ./node-serve/* => /srv/plug-r-qw
          last_ssh: | #这部分是在服务器上，传输文件后执行的命令，新版本重新安装依赖并运行(结尾要加分号，不然会被默认用&&拼接)
            cd /srv/plug-r-qw;
            npm install;
            echo "判断名为plug-r-qw的进程是否存在";
            if test -z $(pm2 pid plug-r-qw);  
            then echo "不存在" ; 
              pm2 start ./index.js --name='plug-r-qw'; 
            else echo "存在" ;  
              pm2 restart plug-r-qw;  
            fi
