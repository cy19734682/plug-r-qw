
# .github/workflows/buildAndDeploy.yml

# 自动发布
# https://github.com/marketplace/actions/deploy-to-github-pages

name: Docker Compose Build

on: # workflow的事件钩子，告知程序说明时候出发自动部署
  push:
    branches: [ master ] # 在master分支有push操作的时候自动部署
    paths:
      - '.github/workflows/docker-compose-build.yml' #当前文件变化时构建
      - 'node-serve/**' #node-serve目录下有变化时构建
      - 'src/**' #src目录下有变化时构建
jobs:
  pull-docker: # 打包传输到服务器并docker部署
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 14.21.2 ] #指定node版本
    steps:
      - uses: actions/checkout@v2

      - name: ssh scp ssh pipelines #使用市场找到的action来将项目build的产物传到我的服务器
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
        env:
          WELCOME: "ssh scp ssh pipelines"
          LASTSSH: "Doing something after copying"
        with:
          host: ${{ secrets.LDD_SERVER_IP }} # 服务器的ip
          user: ${{ secrets.LDD_SERVER_NAME }} # 服务器的账号
          pass: ${{ secrets.LDD_SERVER_PASSWORD }} # 服务器的密码
          connect_timeout: 10s
          last_ssh: | #这部分是在服务器上，传输文件后执行的命令，停止并删除docker，然后重新启动
            cd /usr/local/docker-compose/plug-r-qw;
            docker login --username=${{ secrets.DOCKERHUB_ALIYUN_USERNAME }} --password ${{ secrets.DOCKERHUB_ALIYUN_PASSWORD }} registry.cn-hangzhou.aliyuncs.com;
            # 停止旧版plug容器;
            docker stop plug-r-qw;
            # 删除旧版plug容器;
            docker rm -f plug-r-qw;
            # 删除旧版plug镜像;
            docker rmi -f registry.cn-hangzhou.aliyuncs.com/chenyue/plug-r-qw:service;
            # 停止旧版nginx容器;
            docker stop nginx;
            # 删除旧版nginx容器;
            docker rm -f nginx;
            # 启动;
            docker-compose up -d
            
